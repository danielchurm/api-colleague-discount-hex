// Code generated by MockGen. DO NOT EDIT.
// Source: get_card.go

// Package mock_http_handlers is a generated GoMock package.
package mock_http_handlers

import (
	reflect "reflect"

	domain "github.com/JSainsburyPLC/smartshop-api-colleague-discount/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockColleagueDiscountCardRetriever is a mock of ColleagueDiscountCardRetriever interface.
type MockColleagueDiscountCardRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockColleagueDiscountCardRetrieverMockRecorder
}

// MockColleagueDiscountCardRetrieverMockRecorder is the mock recorder for MockColleagueDiscountCardRetriever.
type MockColleagueDiscountCardRetrieverMockRecorder struct {
	mock *MockColleagueDiscountCardRetriever
}

// NewMockColleagueDiscountCardRetriever creates a new mock instance.
func NewMockColleagueDiscountCardRetriever(ctrl *gomock.Controller) *MockColleagueDiscountCardRetriever {
	mock := &MockColleagueDiscountCardRetriever{ctrl: ctrl}
	mock.recorder = &MockColleagueDiscountCardRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColleagueDiscountCardRetriever) EXPECT() *MockColleagueDiscountCardRetrieverMockRecorder {
	return m.recorder
}

// GetCardForUser mocks base method.
func (m *MockColleagueDiscountCardRetriever) GetCardForUser(userId int) (domain.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardForUser", userId)
	ret0, _ := ret[0].(domain.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardForUser indicates an expected call of GetCardForUser.
func (mr *MockColleagueDiscountCardRetrieverMockRecorder) GetCardForUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardForUser", reflect.TypeOf((*MockColleagueDiscountCardRetriever)(nil).GetCardForUser), userId)
}
